"use client";

import { createContext, ReactNode, useEffect, useState } from "react";
import { OptionType } from "../components/selects/SingleSelect";
import { BeforeInstallPromptEvent } from "../models/interfaces/BeforeInstallPromptEvent";
import useUserExploitations from "../hooks/exploitations/useUserExploitations";

type ExploitationContextDataType = {
  selectedExploitationOption: OptionType | null;
  handleSelectedExploitationOption: (option: OptionType) => void;

  deferredPrompt: BeforeInstallPromptEvent | null;
  setDeferredPrompt: React.Dispatch<
    React.SetStateAction<BeforeInstallPromptEvent | null>
  >;
};

type ExploitationContextProviderProps = {
  children: ReactNode;
};

const initialExploitationContextData: ExploitationContextDataType = {
  selectedExploitationOption: null,
  handleSelectedExploitationOption: () => {},
  deferredPrompt: null,
  setDeferredPrompt: () => {},
};

export const ExploitationContext = createContext(
  initialExploitationContextData
);

const ExploitationContextProvider = ({
  children,
}: ExploitationContextProviderProps) => {
  const { exploitations: userExploitations } = useUserExploitations();

  const [selectedExploitationOption, setSelectedExploitationOption] =
    useState<OptionType | null>(null);
  const [deferredPrompt, setDeferredPrompt] =
    useState<BeforeInstallPromptEvent | null>(null);

  const handleSelectedExploitationOption = (option: OptionType) => {
    setSelectedExploitationOption(option);
  };

  useEffect(() => {
    if (userExploitations && userExploitations.length > 0) {
      setSelectedExploitationOption(userExploitations[0]);
    }
  }, [userExploitations]);

  // console.log("deferredPrompt :", deferredPrompt);
  // console.log('selectedExploitationOption :', selectedExploitationOption);

  return (
    <ExploitationContext.Provider
      value={{
        deferredPrompt,
        selectedExploitationOption: selectedExploitationOption,
        setDeferredPrompt,
        handleSelectedExploitationOption,
      }}
    >
      {children}
    </ExploitationContext.Provider>
  );
};

export default ExploitationContextProvider;
