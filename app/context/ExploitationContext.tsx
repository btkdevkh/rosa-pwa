"use client";

import { createContext, ReactNode, useEffect, useState } from "react";
import { OptionTypeDashboard } from "../models/interfaces/OptionTypeDashboard";
import { BeforeInstallPromptEvent } from "../models/interfaces/BeforeInstallPromptEvent";

type ExploitationContextDataType = {
  selectedExploitationOption: OptionTypeDashboard | null;
  handleSelectedExploitationOption: (option: OptionTypeDashboard) => void;

  deferredPrompt: BeforeInstallPromptEvent | null;
  setDeferredPrompt: React.Dispatch<
    React.SetStateAction<BeforeInstallPromptEvent | null>
  >;
};

type ExploitationContextProviderProps = {
  children: ReactNode;
};

const initialExploitationContextData: ExploitationContextDataType = {
  selectedExploitationOption: null,
  handleSelectedExploitationOption: () => {},
  deferredPrompt: null,
  setDeferredPrompt: () => {},
};

export const ExploitationContext = createContext(
  initialExploitationContextData
);

const ExploitationContextProvider = ({
  children,
}: ExploitationContextProviderProps) => {
  const [selectedExploitationOption, setSelectedExploitationOption] =
    useState<OptionTypeDashboard | null>(null);
  const [deferredPrompt, setDeferredPrompt] =
    useState<BeforeInstallPromptEvent | null>(null);

  const handleSelectedExploitationOption = (option: OptionTypeDashboard) => {
    setSelectedExploitationOption(option);
  };

  // Assigne "beforeinstallprompt" to state on "/settings" page
  useEffect(() => {
    const handleBeforeInstallPrompt = (e: BeforeInstallPromptEvent) => {
      // e.preventDefault();
      setDeferredPrompt(e);
    };

    window.addEventListener(
      "beforeinstallprompt",
      handleBeforeInstallPrompt as EventListener
    );

    // Cleanup
    return () => {
      window.removeEventListener(
        "beforeinstallprompt",
        handleBeforeInstallPrompt as EventListener
      );
    };
  }, []);

  return (
    <ExploitationContext.Provider
      value={{
        deferredPrompt,
        selectedExploitationOption: selectedExploitationOption,
        setDeferredPrompt,
        handleSelectedExploitationOption,
      }}
    >
      {children}
    </ExploitationContext.Provider>
  );
};

export default ExploitationContextProvider;
