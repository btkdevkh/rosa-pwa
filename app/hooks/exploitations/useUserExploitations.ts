import { OptionType } from "@/app/components/selects/SingleSelect";
import { AuthContext } from "@/app/context/AuthContext";
import { Exploitation } from "@/app/models/interfaces/Exploitation";
import { useContext, useEffect, useState } from "react";

const useUserExploitations = () => {
  const { authenticatedUser } = useContext(AuthContext);

  const [exploitations, setExploitations] = useState<OptionType[] | null>(null);
  const [loading, setLoading] = useState(true);

  // Fetch exploitations
  useEffect(() => {
    const fetchExploitations = async () => {
      try {
        const userUID = authenticatedUser?.uid;

        // JS fetch api
        const response = await fetch(
          `${process.env.NEXT_PUBLIC_API_URL}/api/exploitations?userUID=${userUID}`
        );

        if (response.ok) {
          const exploitations: Exploitation[] = await response.json();
          const exploitationOptions = exploitations.map(exploitation => ({
            id: exploitation.id,
            value: exploitation.nom,
            label: exploitation.nom,
          }));

          setExploitations(exploitationOptions);
        } else {
          console.error("response: ", response);
          console.error("Failed to fetch exploitations: ", response.status);
        }
      } catch (error) {
        console.error("Error fetching exploitations: ", error);
      } finally {
        setLoading(false);
      }
    };

    fetchExploitations();
  }, [authenticatedUser]);

  return { loading, exploitations };
};

export default useUserExploitations;
