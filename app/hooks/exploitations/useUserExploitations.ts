import { AuthContext } from "@/app/context/AuthContext";
import { Exploitation } from "@/app/models/interfaces/Exploitation";
import { OptionType } from "@/app/models/types/OptionType";
import { useContext, useEffect, useState } from "react";

const useUserExploitations = () => {
  const { authenticatedUser } = useContext(AuthContext);

  const [loading, setLoading] = useState(true);
  const [success, setSuccess] = useState(true);
  const [exploitations, setExploitations] = useState<OptionType[] | null>(null);

  useEffect(() => {
    let isMounted = true;

    if (authenticatedUser && authenticatedUser.uid) {
      // Fetch exploitations from "server action"
      const fetchExploitations = async () => {
        try {
          const userUID = authenticatedUser.uid;

          const response = await fetch(
            `${process.env.NEXT_PUBLIC_API_URL}/api/exploitations?userUID=${userUID}`
          );

          if (isMounted) {
            setLoading(false);

            if (!response.ok) {
              console.error("response: ", response);
              throw new Error("Failed to fetch exploitations");
            }

            const exploitations: Exploitation[] = await response.json();
            const exploitationOptions = exploitations.map(exploitation => ({
              ...exploitation,
              id: exploitation.id,
              value: exploitation.nom,
              label: exploitation.nom,
            }));

            setExploitations(exploitationOptions);
          }
        } catch (error) {
          if (isMounted) {
            setLoading(false);
            setSuccess(false);
          }
          console.error("Failed to fetch exploitations:", error);
        }
      };

      fetchExploitations();
    }

    return () => {
      isMounted = false;
    };
  }, [authenticatedUser]);

  return { loading, success, exploitations };
};

export default useUserExploitations;
