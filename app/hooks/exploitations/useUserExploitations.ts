import { AuthContext } from "@/app/context/AuthContext";
import { Exploitation } from "@/app/models/interfaces/Exploitation";
import { OptionType } from "@/app/models/types/OptionType";
import { useContext, useEffect, useState } from "react";

const useUserExploitations = () => {
  const { authenticatedUser } = useContext(AuthContext);

  const [loading, setLoading] = useState(true);
  const [exploitations, setExploitations] = useState<OptionType[] | null>(null);

  // Fetch exploitations
  useEffect(() => {
    if (authenticatedUser && authenticatedUser.uid) {
      const fetchExploitations = async () => {
        try {
          const userUID = authenticatedUser.uid;

          // JS fetch api
          const response = await fetch(
            `${process.env.NEXT_PUBLIC_API_URL}/api/exploitations?userUID=${userUID}`
          );

          if (!response.ok) {
            console.error("response: ", response);
            throw new Error("Failed to fetch exploitations");
          }

          const exploitations: Exploitation[] = await response.json();
          const exploitationOptions = exploitations.map(exploitation => ({
            ...exploitation,
            id: exploitation.id,
            value: exploitation.nom,
            label: exploitation.nom,
          }));

          setExploitations(exploitationOptions);
        } catch (error) {
          console.error("Error fetching exploitations: ", error);
        } finally {
          setLoading(false);
        }
      };

      fetchExploitations();
    }
  }, [authenticatedUser]);

  return { loading, exploitations };
};

export default useUserExploitations;
